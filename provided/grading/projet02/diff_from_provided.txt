unixv6fs.h:
19d18
<  * @author original UNIX v6 team + Mendel Rosenblum (Stanford) + Edouard Bugnion
202,204c201,210
<     /* TODO WEEK 04:
<      * la première chose à faire est de définir cette structure.
<      */
---
>     uint16_t i_mode;
>     uint8_t i_nlink;
>     uint8_t i_uid;
>     uint8_t i_gid;
>     uint8_t i_size0;
>     uint16_t i_size1;
>     uint16_t i_addr[ADDR_SMALL_LENGTH];
>     uint16_t atime[2];
>     uint16_t mtime[2];
> 
239c245
<     uint16_t d_inumber;
---
>     uint16_t d_inumber;               //Contains the number of correponding inode


mount.h:
7d6
<  * @author Edouard Bugnion
25a25,37
> 
> /**
>  * @brief  fill the vector bitmap of the inodes 
>  * u - the mounted filesystem
>  */
> void fill_ibm(struct unix_filesystem * u);
> 
> /**
>  * @brief  fill the vector bitmap of the sectors 
>  * u - the mounted filesystem
>  */
> void fill_fbm(struct unix_filesystem * u);
> 
46a59,61
> /*
>  * staff only; students will not have to implement
>  */


error.h:
7d6
<  * @author Edouard Bugnion


inode.h:
7d6
<  * @author Edouard Bugnion
90c89
<  * @return >0: the sector on disk;  <0 error
---
>  * @return >0: the sector on disk;  0: unallocated;  <0 error
108c107
< int inode_write(struct unix_filesystem *u, uint16_t inr, const struct inode *inode);
---
> int inode_write(struct unix_filesystem *u, uint16_t inr, struct inode *inode);


sha.h:
7d6
<  * @author Aurélien Soccard
10a10
> #include <openssl/sha.h>
28c28
<  * @param inode the inode of which we want to print the content
---
>  * @param inode the inocde of which we want to print the content


test-core.c:
5d4
<  * @author Aurélien Soccard & Jean-Cédric Chappelier


filev6.h:
7d6
<  * @author Edouard Bugnion
26c25
<  * @brief open the file corresponding to a given inode; set offset to zero
---
>  * @brief open up a file corresponding to a given inode; set offset to zero
28c27
<  * @param inr the inode number (IN)
---
>  * @param inr he inode number (IN)
30c29
<  * @return 0 on success; the appropriate error code (<0) on error
---
>  * @return 0 on success; <0 on errror
46,47c45
<  * @return >0: the number of bytes of the file read; 0: end of file;
<  *             the appropriate error code (<0) on error
---
>  * @return >0: the number of bytes of the file read; 0: end of file; <0 error
54c52
<  * @param mode the mode of the file
---
>  * @param mode the new offset of the file
68c66
< int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, const void *buf, int len);
---
> int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, void *buf, int len);


sector.h:
7d6
<  * @author Edouard Bugnion
31c30
<  * @brief write one 512-byte sector from the virtual disk
---
>  * @brief read one 512-byte sector from the virtual disk
37c36
< int sector_write(FILE *f, uint32_t sector, const void *data);
---
> int sector_write(FILE *f, uint32_t sector, void  *data);


direntv6.h:
7d6
<  * @author Edouard Bugnion
21,24c20,23
<     /* TODO WEEK 06:
<      * définir cette structure.
<      */
<     int unused; // so that it can compile before WEEK 6
---
>     struct filev6 fv6;
>     struct direntv6 dirs[DIRENTRIES_PER_SECTOR];
>     int cur ;
>     int last;
38c39
<  * @param d the directory reader
---
>  * @param d the dierctory reader
46c47
<  * @brief debugging routine; print a subtree (note: recursive)
---
>  * @brief debugging routine; print the a subtree (note: recursive)
57,58c58,59
<  * @param inr the root of the subtree
<  * @param entry the pathname relative to the subtree
---
>  * @param inr the current of the subtree
>  * @param entry the prefix to the subtree


bmblock.h:
7d6
<  * @author Edouard Bugnion
11d9
< #include <stddef.h> // for size_t
19c17,21
<     int unused; // so that it can compile before WEEK 9
---
>    size_t length;
>    uint64_t cursor;
>    uint64_t min;
>    uint64_t max;
>    uint64_t bm[1];
26c28
<  * between min and max (included, thus (max-min+1) elements).
---
>  * between min and may (included, thus (max-min+1) elements).

